{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Desktop/Code/React/weather_app/src/WeatherApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import moment from \"moment\";\n// import axios from \"axios\";\n\n// const WeatherApp = () => {\n//   const [location, setLocation] = useState(\"\");\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const fetchWeatherData = async () => {\n//       if (location) {\n//         setLoading(true);\n//         const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n//         const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n//         try {\n//           const response = await axios.get(apiUrl);\n//           setWeatherData(response.data);\n//           setLoading(false);\n//         } catch (error) {\n//           console.log(error);\n//           setLoading(false);\n//         }\n//       }\n//     };\n\n//     fetchWeatherData();\n//   }, [location]);\n\n//   const handleLocationChange = (event) => {\n//     setLocation(event.target.value);\n//   };\n\n//   const renderWeatherData = () => {\n//     if (loading) {\n//       return <p>Loading weather data...</p>;\n//     }\n\n//     if (!weatherData) {\n//       return null;\n//     }\n\n//     const weatherDescription = weatherData.weather[0].description;\n//     const temperature = Math.round(weatherData.main.temp);\n//     const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n//     const humidity = weatherData.main.humidity;\n//     const windSpeed = weatherData.wind.speed;\n\n//     return (\n//       <div>\n//         <h2>{weatherDescription}</h2>\n//         <p>Temperature: {temperature}°C</p>\n//         <p>Feels like: {feelsLikeTemperature}°C</p>\n//         <p>Humidity: {humidity}%</p>\n//         <p>Wind Speed: {windSpeed} m/s</p>\n//       </div>\n//     );\n//   };\n\n//   const renderLocationDropdown = () => {\n//     return (\n//       <select value={location} onChange={handleLocationChange}>\n//         <option value=\"\">Select a location...</option>\n//         <option value=\"New York\">New York</option>\n//         <option value=\"London\">London</option>\n//         <option value=\"Tokyo\">Tokyo</option>\n//         <option value=\"Sydney\">Sydney</option>\n//         <option value=\"Japan\">Japan</option>\n//         <option value=\"Mumbai\">Mumbai</option>\n//         <option value=\"Hyderabad\">Hyderabad</option>\n//       </select>\n//     );\n//   };\n\n//   const renderHeader = () => {\n//     const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n//     return (\n//       <div>\n//         <h1>Hello user!</h1>\n//         <p>{date}</p>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {renderHeader()}\n//       {renderLocationDropdown()}\n//       {renderWeatherData()}\n//     </div>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const options = [{\n    value: \"New York\",\n    label: \"New York\"\n  }, {\n    value: \"London\",\n    label: \"London\"\n  }, {\n    value: \"Tokyo\",\n    label: \"Tokyo\"\n  }, {\n    value: \"Sydney\",\n    label: \"Sydney\"\n  }, {\n    value: \"Japan\",\n    label: \"Japan\"\n  }, {\n    value: \"Mumbai\",\n    label: \"Mumbai\"\n  }, {\n    value: \"Hyderabad\",\n    label: \"Hyderabad\"\n  }];\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (location) {\n        setLoading(true);\n        const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location.value}&appid=${apiKey}&units=metric`;\n        try {\n          const response = await axios.get(apiUrl);\n          setWeatherData(response.data);\n          setLoading(false);\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      }\n    };\n    fetchWeatherData();\n  }, [location]);\n  const handleLocationChange = selectedOption => {\n    setLocation(selectedOption);\n  };\n  const renderWeatherData = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading weather data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 14\n      }, this);\n    }\n    if (!weatherData) {\n      return null;\n    }\n    const weatherDescription = weatherData.weather[0].description;\n    const temperature = Math.round(weatherData.main.temp);\n    const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n    const humidity = weatherData.main.humidity;\n    const windSpeed = weatherData.wind.speed;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Feels like: \", feelsLikeTemperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", windSpeed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  };\n  const renderLocationDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(Select, {\n      value: location,\n      onChange: handleLocationChange,\n      options: options,\n      placeholder: \"Select a location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  };\n  const renderHeader = () => {\n    const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello user!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderHeader(), renderLocationDropdown(), renderWeatherData()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"ypvNAKrLcWMw2y7jql+sKN+rHs8=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","moment","axios","Select","jsxDEV","_jsxDEV","WeatherApp","_s","location","setLocation","weatherData","setWeatherData","loading","setLoading","options","value","label","fetchWeatherData","apiKey","apiUrl","response","get","data","error","console","log","handleLocationChange","selectedOption","renderWeatherData","children","fileName","_jsxFileName","lineNumber","columnNumber","weatherDescription","weather","description","temperature","Math","round","main","temp","feelsLikeTemperature","feels_like","humidity","windSpeed","wind","speed","renderLocationDropdown","onChange","placeholder","renderHeader","date","format","_c","$RefreshReg$"],"sources":["/Users/arjun/Desktop/Code/React/weather_app/src/WeatherApp.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import moment from \"moment\";\n// import axios from \"axios\";\n\n// const WeatherApp = () => {\n//   const [location, setLocation] = useState(\"\");\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const fetchWeatherData = async () => {\n//       if (location) {\n//         setLoading(true);\n//         const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n//         const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n//         try {\n//           const response = await axios.get(apiUrl);\n//           setWeatherData(response.data);\n//           setLoading(false);\n//         } catch (error) {\n//           console.log(error);\n//           setLoading(false);\n//         }\n//       }\n//     };\n\n//     fetchWeatherData();\n//   }, [location]);\n\n//   const handleLocationChange = (event) => {\n//     setLocation(event.target.value);\n//   };\n\n//   const renderWeatherData = () => {\n//     if (loading) {\n//       return <p>Loading weather data...</p>;\n//     }\n\n//     if (!weatherData) {\n//       return null;\n//     }\n\n//     const weatherDescription = weatherData.weather[0].description;\n//     const temperature = Math.round(weatherData.main.temp);\n//     const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n//     const humidity = weatherData.main.humidity;\n//     const windSpeed = weatherData.wind.speed;\n\n//     return (\n//       <div>\n//         <h2>{weatherDescription}</h2>\n//         <p>Temperature: {temperature}°C</p>\n//         <p>Feels like: {feelsLikeTemperature}°C</p>\n//         <p>Humidity: {humidity}%</p>\n//         <p>Wind Speed: {windSpeed} m/s</p>\n//       </div>\n//     );\n//   };\n\n//   const renderLocationDropdown = () => {\n//     return (\n//       <select value={location} onChange={handleLocationChange}>\n//         <option value=\"\">Select a location...</option>\n//         <option value=\"New York\">New York</option>\n//         <option value=\"London\">London</option>\n//         <option value=\"Tokyo\">Tokyo</option>\n//         <option value=\"Sydney\">Sydney</option>\n//         <option value=\"Japan\">Japan</option>\n//         <option value=\"Mumbai\">Mumbai</option>\n//         <option value=\"Hyderabad\">Hyderabad</option>\n//       </select>\n//     );\n//   };\n\n//   const renderHeader = () => {\n//     const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n//     return (\n//       <div>\n//         <h1>Hello user!</h1>\n//         <p>{date}</p>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {renderHeader()}\n//       {renderLocationDropdown()}\n//       {renderWeatherData()}\n//     </div>\n//   );\n// };\n\n// export default WeatherApp;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\n\nconst WeatherApp = () => {\n  const [location, setLocation] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const options = [\n    { value: \"New York\", label: \"New York\" },\n    { value: \"London\", label: \"London\" },\n    { value: \"Tokyo\", label: \"Tokyo\" },\n    { value: \"Sydney\", label: \"Sydney\" },\n    { value: \"Japan\", label: \"Japan\" },\n    { value: \"Mumbai\", label: \"Mumbai\" },\n    { value: \"Hyderabad\", label: \"Hyderabad\" },\n  ];\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (location) {\n        setLoading(true);\n        const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location.value}&appid=${apiKey}&units=metric`;\n        try {\n          const response = await axios.get(apiUrl);\n          setWeatherData(response.data);\n          setLoading(false);\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchWeatherData();\n  }, [location]);\n\n  const handleLocationChange = (selectedOption) => {\n    setLocation(selectedOption);\n  };\n\n  const renderWeatherData = () => {\n    if (loading) {\n      return <p>Loading weather data...</p>;\n    }\n\n    if (!weatherData) {\n      return null;\n    }\n\n    const weatherDescription = weatherData.weather[0].description;\n    const temperature = Math.round(weatherData.main.temp);\n    const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n    const humidity = weatherData.main.humidity;\n    const windSpeed = weatherData.wind.speed;\n\n    return (\n      <div>\n        <h2>{weatherDescription}</h2>\n        <p>Temperature: {temperature}°C</p>\n        <p>Feels like: {feelsLikeTemperature}°C</p>\n        <p>Humidity: {humidity}%</p>\n        <p>Wind Speed: {windSpeed} m/s</p>\n      </div>\n    );\n  };\n\n  const renderLocationDropdown = () => {\n    return (\n      <Select\n        value={location}\n        onChange={handleLocationChange}\n        options={options}\n        placeholder=\"Select a location...\"\n      />\n    );\n  };\n\n  const renderHeader = () => {\n    const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n    return (\n      <div>\n        <h1>Hello user!</h1>\n        <p>{date}</p>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {renderHeader()}\n      {renderLocationDropdown()}\n      {renderWeatherData()}\n    </div>\n  );\n};\n\nexport default WeatherApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}