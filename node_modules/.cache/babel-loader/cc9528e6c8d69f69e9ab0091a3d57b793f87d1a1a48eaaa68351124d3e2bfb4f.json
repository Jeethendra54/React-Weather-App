{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Desktop/Code/React/weather_app/src/WeatherApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import moment from \"moment\";\n// import axios from \"axios\";\n\n// const WeatherApp = () => {\n//   const [location, setLocation] = useState(\"\");\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const fetchWeatherData = async () => {\n//       if (location) {\n//         setLoading(true);\n//         const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n//         const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n//         try {\n//           const response = await axios.get(apiUrl);\n//           setWeatherData(response.data);\n//           setLoading(false);\n//         } catch (error) {\n//           console.log(error);\n//           setLoading(false);\n//         }\n//       }\n//     };\n\n//     fetchWeatherData();\n//   }, [location]);\n\n//   const handleLocationChange = (event) => {\n//     setLocation(event.target.value);\n//   };\n\n//   const renderWeatherData = () => {\n//     if (loading) {\n//       return <p>Loading weather data...</p>;\n//     }\n\n//     if (!weatherData) {\n//       return null;\n//     }\n\n//     const weatherDescription = weatherData.weather[0].description;\n//     const temperature = Math.round(weatherData.main.temp);\n//     const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n//     const humidity = weatherData.main.humidity;\n//     const windSpeed = weatherData.wind.speed;\n\n//     return (\n//       <div>\n//         <h2>{weatherDescription}</h2>\n//         <p>Temperature: {temperature}°C</p>\n//         <p>Feels like: {feelsLikeTemperature}°C</p>\n//         <p>Humidity: {humidity}%</p>\n//         <p>Wind Speed: {windSpeed} m/s</p>\n//       </div>\n//     );\n//   };\n\n//   const renderLocationDropdown = () => {\n//     return (\n//       <select value={location} onChange={handleLocationChange}>\n//         <option value=\"\">Select a location...</option>\n//         <option value=\"New York\">New York</option>\n//         <option value=\"London\">London</option>\n//         <option value=\"Tokyo\">Tokyo</option>\n//         <option value=\"Sydney\">Sydney</option>\n//         <option value=\"Japan\">Japan</option>\n//         <option value=\"Mumbai\">Mumbai</option>\n//         <option value=\"Hyderabad\">Hyderabad</option>\n//       </select>\n//     );\n//   };\n\n//   const renderHeader = () => {\n//     const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n//     return (\n//       <div>\n//         <h1>Hello user!</h1>\n//         <p>{date}</p>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {renderHeader()}\n//       {renderLocationDropdown()}\n//       {renderWeatherData()}\n//     </div>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [location, setLocation] = useState(\"\");\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    const fetchOptions = async () => {\n      const response = await axios.get(\"https://raw.githubusercontent.com/lutangar/cities.json/master/cities.json\");\n      const options = response.data.map(option => ({\n        value: option.name,\n        label: option.name\n      }));\n      setOptions(options);\n    };\n    fetchOptions();\n  }, []);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (location) {\n        setLoading(true);\n        const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n        try {\n          const response = await axios.get(apiUrl);\n          setWeatherData(response.data);\n          setLoading(false);\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      }\n    };\n    fetchWeatherData();\n  }, [location]);\n  const handleLocationChange = selectedOption => {\n    setLocation(selectedOption.value);\n  };\n  const renderWeatherData = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading weather data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 14\n      }, this);\n    }\n    if (!weatherData) {\n      return null;\n    }\n    const weatherDescription = weatherData.weather[0].description;\n    const temperature = Math.round(weatherData.main.temp);\n    const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n    const humidity = weatherData.main.humidity;\n    const windSpeed = weatherData.wind.speed;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Feels like: \", feelsLikeTemperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", windSpeed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  };\n  const renderLocationDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(Select, {\n      options: options,\n      value: location ? {\n        value: location,\n        label: location\n      } : null,\n      onChange: handleLocationChange,\n      placeholder: \"Select a location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  };\n  const renderHeader = () => {\n    const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello user!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderHeader(), renderLocationDropdown(), renderWeatherData()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"k3L91NfgbAKATgFBv9uP3WLRurg=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","moment","axios","Select","jsxDEV","_jsxDEV","WeatherApp","_s","location","setLocation","weatherData","setWeatherData","loading","setLoading","options","setOptions","fetchOptions","response","get","data","map","option","value","name","label","fetchWeatherData","apiKey","apiUrl","error","console","log","handleLocationChange","selectedOption","renderWeatherData","children","fileName","_jsxFileName","lineNumber","columnNumber","weatherDescription","weather","description","temperature","Math","round","main","temp","feelsLikeTemperature","feels_like","humidity","windSpeed","wind","speed","renderLocationDropdown","onChange","placeholder","renderHeader","date","format","_c","$RefreshReg$"],"sources":["/Users/arjun/Desktop/Code/React/weather_app/src/WeatherApp.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import moment from \"moment\";\n// import axios from \"axios\";\n\n// const WeatherApp = () => {\n//   const [location, setLocation] = useState(\"\");\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const fetchWeatherData = async () => {\n//       if (location) {\n//         setLoading(true);\n//         const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n//         const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n//         try {\n//           const response = await axios.get(apiUrl);\n//           setWeatherData(response.data);\n//           setLoading(false);\n//         } catch (error) {\n//           console.log(error);\n//           setLoading(false);\n//         }\n//       }\n//     };\n\n//     fetchWeatherData();\n//   }, [location]);\n\n//   const handleLocationChange = (event) => {\n//     setLocation(event.target.value);\n//   };\n\n//   const renderWeatherData = () => {\n//     if (loading) {\n//       return <p>Loading weather data...</p>;\n//     }\n\n//     if (!weatherData) {\n//       return null;\n//     }\n\n//     const weatherDescription = weatherData.weather[0].description;\n//     const temperature = Math.round(weatherData.main.temp);\n//     const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n//     const humidity = weatherData.main.humidity;\n//     const windSpeed = weatherData.wind.speed;\n\n//     return (\n//       <div>\n//         <h2>{weatherDescription}</h2>\n//         <p>Temperature: {temperature}°C</p>\n//         <p>Feels like: {feelsLikeTemperature}°C</p>\n//         <p>Humidity: {humidity}%</p>\n//         <p>Wind Speed: {windSpeed} m/s</p>\n//       </div>\n//     );\n//   };\n\n//   const renderLocationDropdown = () => {\n//     return (\n//       <select value={location} onChange={handleLocationChange}>\n//         <option value=\"\">Select a location...</option>\n//         <option value=\"New York\">New York</option>\n//         <option value=\"London\">London</option>\n//         <option value=\"Tokyo\">Tokyo</option>\n//         <option value=\"Sydney\">Sydney</option>\n//         <option value=\"Japan\">Japan</option>\n//         <option value=\"Mumbai\">Mumbai</option>\n//         <option value=\"Hyderabad\">Hyderabad</option>\n//       </select>\n//     );\n//   };\n\n//   const renderHeader = () => {\n//     const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n//     return (\n//       <div>\n//         <h1>Hello user!</h1>\n//         <p>{date}</p>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {renderHeader()}\n//       {renderLocationDropdown()}\n//       {renderWeatherData()}\n//     </div>\n//   );\n// };\n\n// export default WeatherApp;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\n\nconst WeatherApp = () => {\n  const [location, setLocation] = useState(\"\");\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      const response = await axios.get(\n        \"https://raw.githubusercontent.com/lutangar/cities.json/master/cities.json\"\n      );\n      const options = response.data.map((option) => ({\n        value: option.name,\n        label: option.name,\n      }));\n      setOptions(options);\n    };\n\n    fetchOptions();\n  }, []);\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (location) {\n        setLoading(true);\n        const apiKey = \"94769bac42f99a1dd90610f2611e3ae4\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric`;\n        try {\n          const response = await axios.get(apiUrl);\n          setWeatherData(response.data);\n          setLoading(false);\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchWeatherData();\n  }, [location]);\n\n  const handleLocationChange = (selectedOption) => {\n    setLocation(selectedOption.value);\n  };\n\n  const renderWeatherData = () => {\n    if (loading) {\n      return <p>Loading weather data...</p>;\n    }\n\n    if (!weatherData) {\n      return null;\n    }\n\n    const weatherDescription = weatherData.weather[0].description;\n    const temperature = Math.round(weatherData.main.temp);\n    const feelsLikeTemperature = Math.round(weatherData.main.feels_like);\n    const humidity = weatherData.main.humidity;\n    const windSpeed = weatherData.wind.speed;\n\n    return (\n      <div>\n        <h2>{weatherDescription}</h2>\n        <p>Temperature: {temperature}°C</p>\n        <p>Feels like: {feelsLikeTemperature}°C</p>\n        <p>Humidity: {humidity}%</p>\n        <p>Wind Speed: {windSpeed} m/s</p>\n      </div>\n    );\n  };\n\n  const renderLocationDropdown = () => {\n    return (\n      <Select\n        options={options}\n        value={location ? { value: location, label: location } : null}\n        onChange={handleLocationChange}\n        placeholder=\"Select a location...\"\n      />\n    );\n  };\n\n  const renderHeader = () => {\n    const date = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n\n    return (\n      <div>\n        <h1>Hello user!</h1>\n        <p>{date}</p>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {renderHeader()}\n      {renderLocationDropdown()}\n      {renderWeatherData()}\n    </div>\n  );\n};\n\nexport default WeatherApp;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAC9B,2EACF,CAAC;MACD,MAAMJ,OAAO,GAAGG,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,MAAM,KAAM;QAC7CC,KAAK,EAAED,MAAM,CAACE,IAAI;QAClBC,KAAK,EAAEH,MAAM,CAACE;MAChB,CAAC,CAAC,CAAC;MACHR,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC;IAEDE,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,MAAMyB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAIjB,QAAQ,EAAE;QACZK,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMa,MAAM,GAAG,kCAAkC;QACjD,MAAMC,MAAM,GAAI,qDAAoDnB,QAAS,UAASkB,MAAO,eAAc;QAC3G,IAAI;UACF,MAAMT,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACS,MAAM,CAAC;UACxChB,cAAc,CAACM,QAAQ,CAACE,IAAI,CAAC;UAC7BN,UAAU,CAAC,KAAK,CAAC;QACnB,CAAC,CAAC,OAAOe,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;UAClBf,UAAU,CAAC,KAAK,CAAC;QACnB;MACF;IACF,CAAC;IAEDY,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,MAAMuB,oBAAoB,GAAIC,cAAc,IAAK;IAC/CvB,WAAW,CAACuB,cAAc,CAACV,KAAK,CAAC;EACnC,CAAC;EAED,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIrB,OAAO,EAAE;MACX,oBAAOP,OAAA;QAAA6B,QAAA,EAAG;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACvC;IAEA,IAAI,CAAC5B,WAAW,EAAE;MAChB,OAAO,IAAI;IACb;IAEA,MAAM6B,kBAAkB,GAAG7B,WAAW,CAAC8B,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;IAC7D,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAClC,WAAW,CAACmC,IAAI,CAACC,IAAI,CAAC;IACrD,MAAMC,oBAAoB,GAAGJ,IAAI,CAACC,KAAK,CAAClC,WAAW,CAACmC,IAAI,CAACG,UAAU,CAAC;IACpE,MAAMC,QAAQ,GAAGvC,WAAW,CAACmC,IAAI,CAACI,QAAQ;IAC1C,MAAMC,SAAS,GAAGxC,WAAW,CAACyC,IAAI,CAACC,KAAK;IAExC,oBACE/C,OAAA;MAAA6B,QAAA,gBACE7B,OAAA;QAAA6B,QAAA,EAAKK;MAAkB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7BjC,OAAA;QAAA6B,QAAA,GAAG,eAAa,EAACQ,WAAW,EAAC,OAAE;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnCjC,OAAA;QAAA6B,QAAA,GAAG,cAAY,EAACa,oBAAoB,EAAC,OAAE;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC3CjC,OAAA;QAAA6B,QAAA,GAAG,YAAU,EAACe,QAAQ,EAAC,GAAC;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5BjC,OAAA;QAAA6B,QAAA,GAAG,cAAY,EAACgB,SAAS,EAAC,MAAI;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAEV,CAAC;EAED,MAAMe,sBAAsB,GAAGA,CAAA,KAAM;IACnC,oBACEhD,OAAA,CAACF,MAAM;MACLW,OAAO,EAAEA,OAAQ;MACjBQ,KAAK,EAAEd,QAAQ,GAAG;QAAEc,KAAK,EAAEd,QAAQ;QAAEgB,KAAK,EAAEhB;MAAS,CAAC,GAAG,IAAK;MAC9D8C,QAAQ,EAAEvB,oBAAqB;MAC/BwB,WAAW,EAAC;IAAsB;MAAApB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAEN,CAAC;EAED,MAAMkB,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,IAAI,GAAGxD,MAAM,CAAC,CAAC,CAACyD,MAAM,CAAC,yBAAyB,CAAC;IAEvD,oBACErD,OAAA;MAAA6B,QAAA,gBACE7B,OAAA;QAAA6B,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBjC,OAAA;QAAA6B,QAAA,EAAIuB;MAAI;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEV,CAAC;EAED,oBACEjC,OAAA;IAAA6B,QAAA,GACGsB,YAAY,CAAC,CAAC,EACdH,sBAAsB,CAAC,CAAC,EACxBpB,iBAAiB,CAAC,CAAC;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV,CAAC;AAAC/B,EAAA,CApGID,UAAU;AAAAqD,EAAA,GAAVrD,UAAU;AAsGhB,eAAeA,UAAU;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}